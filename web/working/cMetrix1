#!/usr/bin/perl

#============================================================================================================
#Author: Neyaz Ahmad
#Version=1.0
#perl /etc/EXT/Citation_Metrics/web/cMetrix get -v -M GET /
#perl /etc/EXT/Citation_Metrics/web/cMetrix get -v -M GET /eProofing?"Input_Type=XML&Key=xxx-000-zzz"
#perl /etc/EXT/Citation_Metrics/web/cMetrix get -v -M POST /eProofing?"Input_Type=XML&Key=xxx-000-zzz"

#perl c:/Apache/htdocs/CitationMetrix/cMetrix.pl cgi
#http://10.113.5.197:8080/cMetrix/eProofing
#http://10.113.5.197:8080/cMetrix
#============================================================================================================

BEGIN{
    $scriptLocation=$0;
    if($scriptLocation!~/[\/\\]/){
	use Cwd;
	my $pwd = getcwd;
	$pwd=~s/\//\//;
	$scriptLocation="$pwd"."\/"."$scriptLocation";
    }elsif($scriptLocation=~/^\.\/([^\/\\]+?)$/){
	use Cwd;
	my $pwd = getcwd;
	$pwd=~s/\//\//;
	$scriptLocation=~s/^\.\///;
	$scriptLocation="$pwd"."\/"."$scriptLocation";
    }
    $scriptLocation=~s/\/([^\/\\]+?)$//;
    my $moduleLocation=$scriptLocation;
    $moduleLocation=~s/(^.*\/|^)([^\/\\]+?)$/$1Modules/;
    unshift(@INC, "$moduleLocation");
}

my $configLocation=$scriptLocation;
#$configLocation=~s/(^.*\/|^)([^\/\\]+?)$/$1Config\/web\.config/;
$configLocation=~s/(^.*\/|^)([^\/\\]+?)$/$1Config\/app\.config/;


use Mojolicious::Lite;
use Data::UUID;
use Data::Dumper;

##Read web.config file and retrun ConfigHashRef
#use File::ConfigData;
#my $configHashRef=&ConfigHash($configLocation);
#$File_Name=&File_Upload($self, $configHashRef->{Upload_Location});

use GetConfig;
my $config=&get_config($configLocation);

#__________________________________________________________________________________________________
##Client Test
get '/' => sub{
  shift->render(template => 'client');
};


##Main Web Service
post '/:Service_Type' => sub{
  my $self=shift;

  my $Service_Type= $self->param('Service_Type');
  my $Input_Type= $self->param('Input_Type');
  my $Input_File= $self->param('Input_File');
  my $DOI= $self->param('DOI');
  my $Key= $self->param('Key');
  my $Status= $self->param('Status');
  my $Token= $self->param('Token');

  my $File_Name="";
  my $Uuid_Token="";

  eval {$File_Name = $Input_File->filename;}; warn $@ if $@;

#----------
  if($Service_Type=~/^eProofing|DDS$/){

    unless ($Key){
      $self->render(json => {status => "error", data => { message => "No API Key found"}});
      return undef;
    }
    unless ($Input_File){
      $self->render(json => {status => "error", data => { message => "No Input_File define"}});
      return undef;
    }
    unless ($File_Name){
      $self->render(json => {status => "error", data => { message => "No Input_File found"}});
      return undef;
    }

  }elsif($Service_Type=~/^Status$/){
    unless ($Token){
      $self->render(json => {status => "error", data => { message => "No Token found"}});
      return undef;
    }
  }else{
      $self->render(json => {status => "error", data => { message => "No Service_Type found"}});
      return undef;
    }
#------

  $File_Name=&File_Upload($self, $$config{"web.Upload_Location"});

  $Uuid_Token=&Generate_Token;

  $self->stash(
	       Service_Type=> $Service_Type,
	       Input_Type=> $Input_Type,
	       DOI=> $DOI,
	       Key=> $Key,
	       Status=> $Status,
	       Token=> $Token,
	       File_Name=> $File_Name,
	       Uuid_Token=>$Uuid_Token,
	      );

  #Responce Token
  if(defined $Uuid_Token){
      $self->render(json => {status => "success", data => { token => "$Uuid_Token",  message => "Job in queue"}});
  }else{
    $self->render('cMetrix');
  }
};
app->start;

#========================================================================================================
sub File_Upload{
  my ($self, $upload_Location)=@_;

  # Check file size
  return $self->render(text => 'File is too big.', status => 200)
    if $self->req->is_limit_exceeded;

  # Process uploaded file
  my $Input_File = $self->param('Input_File');
  my $size = $Input_File->size;
  my $File_Name = $Input_File->filename;

  my $upload = $self->req->upload('Input_File');
  $upload->move_to("$upload_Location/$File_Name");

  return $File_Name;
}
#========================================================================================================

sub Generate_Token{
  my $ug    = Data::UUID->new;
  my $uuid_Token   = $ug->to_string("uuid_token");
  return $uuid_Token;
}


sub Save_Token{

}


sub Responce_Token{

}


sub Process_Queue{

}

#========================================================================================================

__DATA__

@@ layouts/wrapper.html.ep
  <html>
  <head>
  <title>Citation Metrix</title>
  </head>
  <body>
  <p>Service_Type Test: <%= $Service_Type %></p>
  <p>Input Type: <%= $Input_Type %></p>
  <p>Key: <%= $Key %></p>
  <p>File Name: <%= $File_Name %></p>
  <p>TOKEN: <%= $Uuid_Token %></p>

  </body>
  </html>


@@ cMetrix.html.ep
% title 'CitationMetrix';
% layout 'wrapper';


